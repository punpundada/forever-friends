// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @map("_id")
  name               String
  sessions           Session[]
  email              String               @unique
  password           String
  email_verified     Boolean              @default(false)
  Email_Verification Email_Verification[]
  Profile            Profile?
  role               Role
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Pet                Pet[]
  AdoptionCenter     AdoptionCenter[]     @relation(fields: [adoptionCenterIds], references: [id])
  adoptionCenterIds  Int[]
  adoptionCenterId   Int?
  Adoption           Adoption[]
  isBanned           Boolean              @default(false)

  @@map("users")
}

model Profile {
  id       Int     @id @map("_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  address  String?
  phone    String?
  bio      String?
  imageUrl String?

  @@map("user_profiles")
}

model Session {
  id        String   @id @map("_id")
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessios")
}

model Email_Verification {
  id         Int      @id @map("_id")
  code       String
  userId     String   @unique
  user       User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  email      String
  expires_at DateTime

  @@map("email_verification")
}

enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  EMPLOYEE
}

model AdoptionCenter {
  id          Int      @id @map("_id")
  name        String
  landmark    String?
  pincode     Int
  street      String
  state       String
  country     String
  phoneNumber String   @map("phone_number")
  email       String
  users       User[]   @relation(fields: [userIds], references: [id])
  userIds     String[]
  pets        Pet[]

  @@map("adoption_centers")
}

model Adoption {
  id        Int            @id @map("_id")
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  petId     Int
  pet       Pet            @relation(fields: [petId], references: [id])
  status    AdoptionStatus
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("adoptions")
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Pet {
  id               Int            @id @map("_id")
  name             String
  age              Int
  breed            String
  description      String
  imageUrl         String[]
  location         String
  available        Boolean        @default(true)
  adoptionCenterId Int
  adoptionCenter   AdoptionCenter @relation(fields: [adoptionCenterId], references: [id])
  adoptions        Adoption[]
  User             User?          @relation(fields: [userId], references: [id])
  userId           String?
  assignedTo       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("pets")
}

model PasswordReset {
  id         Int      @id @map("_id")
  token_hash String   @unique
  userId     String   @unique
  expiresAt  DateTime

  @@map("password_reset")
}
